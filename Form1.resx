<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Ah/n/A+P//8fx///H+P//x/z//8f+///P/8=
</value>
  </data>
</root>