using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mail;
using System.Net.Security;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Net.Mime.MediaTypeNames;

namespace SecurityModule
{
    public partial class PenTest : Form
    {
        private readonly Random random = new Random();
        private readonly Dictionary<string, bool> vulnerabilityResults = new Dictionary<string, bool>();

        private const string VirusTotalApiKey = "4c78dad833dcff8173288250508d142f2d58a6307041e3de8dfab34b5740128f";
        private const string UrlScanApiKey = "01967e60-c87e-759b-95c1-87bc867e86eb";

        public PenTest()
        {
            InitializeComponent();
        }

        private async void button1_Click(object sender, EventArgs e)
        {
            string target = textBox1.Text.Trim();

            if (!IsValidUrlOrIp(target))
            {
                MessageBox.Show("Please enter a valid URL or IP address.", "Invalid Input", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            richTextBox1.Clear();
            vulnerabilityResults.Clear();

            await StartScanAsync(target);
            await CheckVirusTotal(target);
            await CheckUrlScanIo(target);

            SaveHtmlReport(target);

            MessageBox.Show("Scan complete! Report saved and emailed.", "Done", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private bool IsValidUrlOrIp(string input)
        {
            return Uri.IsWellFormedUriString(input, UriKind.Absolute) || IPAddress.TryParse(input, out _);
        }

        private async Task StartScanAsync(string target)
        {
            await FancyProgress("Initializing scan engine...", 1, 5);

            await FancyProgress("Gathering server headers...", 6, 15);
            await CheckServerHeader(target);

            await FancyProgress("Checking for Open Directory Listing...", 16, 30);
            await CheckDirectoryListing(target);

            await FancyProgress("Testing for XSS vulnerabilities...", 31, 50);
            await TestXss(target);

            await FancyProgress("Testing for SQL Injection vulnerabilities...", 51, 70);
            await TestSqlInjection(target);

            await FancyProgress("Checking for outdated server versions...", 71, 90);
            await CheckOutdatedServer(target);

            await FancyProgress("Finalizing report generation...", 91, 100);
        }

        private async Task FancyProgress(string phase, int start, int end)
        {
            for (int i = start; i <= end; i += 5)
            {
                richTextBox1.AppendText($"{phase}\n[ {new string('█', i / 5)}{new string(' ', 20 - (i / 5))} ] {i}%\n\n");
                richTextBox1.ScrollToCaret();
                await Task.Delay(random.Next(100, 200));
            }
        }

        private async Task CheckServerHeader(string target)
        {
            try
            {
                using var client = new HttpClient();
                client.DefaultRequestHeaders.UserAgent.ParseAdd("Mozilla/5.0");

                var response = await client.GetAsync(target);
                if (response.Headers.Server.Any())
                {
                    string server = response.Headers.Server.ToString();
                    richTextBox1.AppendText($"[+] Web Server: {server}\n");
                    vulnerabilityResults.Add("Server Header Found", true);
                }
                else
                {
                    vulnerabilityResults.Add("Server Header Found", false);
                }
            }
            catch
            {
                vulnerabilityResults.Add("Server Header Found", false);
            }
        }

        private async Task CheckDirectoryListing(string target)
        {
            try
            {
                using var client = new HttpClient();
                var html = await client.GetStringAsync(target);

                if (html.Contains("Index of /") || html.Contains("Directory listing for"))
                {
                    richTextBox1.AppendText("[!] Open Directory Listing Found!\n");
                    vulnerabilityResults.Add("Open Directory Listing", true);
                }
                else
                {
                    vulnerabilityResults.Add("Open Directory Listing", false);
                }
            }
            catch
            {
                vulnerabilityResults.Add("Open Directory Listing", false);
            }
        }

        private async Task TestXss(string target)
        {
            try
            {
                var xssPayload = "<script>alert('XSS')</script>";
                var xssUrl = target.Contains("?") ? target + "&xss=" + WebUtility.UrlEncode(xssPayload)
                                                  : target + "?xss=" + WebUtility.UrlEncode(xssPayload);

                using var client = new HttpClient();
                var html = await client.GetStringAsync(xssUrl);

                if (html.Contains(xssPayload))
                {
                    richTextBox1.AppendText("[!] Possible XSS Vulnerability Found!\n");
                    vulnerabilityResults.Add("XSS Vulnerability", true);
                }
                else
                {
                    vulnerabilityResults.Add("XSS Vulnerability", false);
                }
            }
            catch
            {
                vulnerabilityResults.Add("XSS Vulnerability", false);
            }
        }

        private async Task TestSqlInjection(string target)
        {
            try
            {
                var sqlPayload = "' OR '1'='1";
                var sqlUrl = target.Contains("?") ? target + "&id=" + WebUtility.UrlEncode(sqlPayload)
                                                  : target + "?id=" + WebUtility.UrlEncode(sqlPayload);

                using var client = new HttpClient();
                var html = await client.GetStringAsync(sqlUrl);

                if (html.Contains("mysql_fetch") || html.Contains("You have an error in your SQL syntax") || html.Contains("Warning:"))
                {
                    richTextBox1.AppendText("[!] Possible SQL Injection Found!\n");
                    vulnerabilityResults.Add("SQL Injection", true);
                }
                else
                {
                    vulnerabilityResults.Add("SQL Injection", false);
                }
            }
            catch
            {
                vulnerabilityResults.Add("SQL Injection", false);
            }
        }

        private async Task CheckOutdatedServer(string target)
        {
            try
            {
                using var client = new HttpClient();
                client.DefaultRequestHeaders.UserAgent.ParseAdd("Mozilla/5.0");

                var response = await client.GetAsync(target);
                var serverHeader = response.Headers.Server.ToString();

                if (serverHeader.Contains("Apache/2.2") || serverHeader.Contains("IIS/6.0"))
                {
                    richTextBox1.AppendText("[!] Outdated Server Detected!\n");
                    vulnerabilityResults.Add("Outdated Server Version", true);
                }
                else
                {
                    vulnerabilityResults.Add("Outdated Server Version", false);
                }
            }
            catch
            {
                vulnerabilityResults.Add("Outdated Server Version", false);
            }
        }

        private async Task CheckVirusTotal(string target)
        {
            try
            {
                using HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Add("x-apikey", VirusTotalApiKey);

                var content = new FormUrlEncodedContent(new[]
                {
                    new KeyValuePair<string, string>("url", target)
                });

                var response = await client.PostAsync("https://www.virustotal.com/api/v3/urls", content);
                response.EnsureSuccessStatusCode();

                richTextBox1.AppendText("\n[✔] Phishing website scan submitted successfully.\n");
            }
            catch (Exception ex)
            {
                richTextBox1.AppendText("\n[!] VirusTotal error: " + ex.Message + "\n");
            }
        }

        private async Task CheckUrlScanIo(string target)
        {
            try
            {
                using HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Add("API-Key", UrlScanApiKey);

                var jsonContent = $"{{\"url\": \"{target}\"}}";
                var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

                var response = await client.PostAsync("https://urlscan.io/api/v1/scan/", content);
                response.EnsureSuccessStatusCode();

                richTextBox1.AppendText("\n[✔] URL scan submitted successfully.\n");
            }
            catch (Exception ex)
            {
                richTextBox1.AppendText("\n[!] URLScan.io error: " + ex.Message + "\n");
            }
        }

        private void SaveHtmlReport(string target)
        {
            SaveFileDialog saveDialog = new SaveFileDialog
            {
                Title = "Save Penetration Test Report",
                Filter = "HTML Files (*.html)|*.html",
                FileName = $"PenTest_Report_{DateTime.Now:yyyyMMdd_HHmmss}.html"
            };

            if (saveDialog.ShowDialog() == DialogResult.OK)
            {
                var html = BuildHtmlReport(target);
                File.WriteAllText(saveDialog.FileName, html);
                Process.Start(new ProcessStartInfo(saveDialog.FileName) { UseShellExecute = true });
                SendEmailWithReport(saveDialog.FileName);
            }
        }

        private string BuildHtmlReport(string target)
        {
            var foundCount = vulnerabilityResults.Count(v => v.Value);
            var safeCount = vulnerabilityResults.Count(v => !v.Value);

            var html = new StringBuilder();
            html.AppendLine("<html>");
            html.AppendLine("<head>");
            html.AppendLine("<title>Penetration Test Report</title>");
            html.AppendLine("<style>");
            html.AppendLine("html { scroll-behavior: smooth; }"); // Smooth scroll behavior
            html.AppendLine("body { font-family: Arial; background-color: #f2f2f2; margin: 40px; }");
            html.AppendLine(".header { font-size: 32px; font-weight: bold; text-align: center; margin-bottom: 20px; }");
            html.AppendLine(".section { margin-top: 40px; }");
            html.AppendLine(".subheader { font-size: 22px; color: #333; margin-bottom: 15px; text-align: center; }");
            html.AppendLine("table { width: 100%; border-collapse: collapse; margin-top: 20px; }");
            html.AppendLine("th, td { border: 1px solid #ccc; padding: 10px; text-align: left; }");
            html.AppendLine("th { background-color: #4CAF50; color: white; }");
            html.AppendLine("</style>");
            html.AppendLine("</head>");
            html.AppendLine("<body>");

            // -- Logo and Header --
            html.AppendLine("<div style='text-align:center; margin-bottom:20px;'>");
            html.AppendLine("<img src='https://upload.wikimedia.org/wikipedia/commons/thumb/2/27/White_hat_hacker.svg/1200px-White_hat_hacker.svg.png' width='120' style='margin-bottom:10px;' />");
            html.AppendLine("<div class='header'>SecurityModule Penetration Test Report</div>");
            html.AppendLine("</div>");

            // -- Target Info --
            html.AppendLine($"<div><b>Target:</b> {target}<br><b>Date:</b> {DateTime.Now}</div>");

            // -- Pie Chart Section --
            html.AppendLine("<div class='section'><div class='subheader'>Scan Results Overview (Pie Chart)</div>");
            html.AppendLine("<svg width='300' height='300' viewBox='0 0 32 32' style='transform: rotate(-90deg); display:block; margin:auto;'>");
            html.AppendLine("<circle r='16' cx='16' cy='16' fill='#eee'/>");
            html.AppendLine($"<circle r='16' cx='16' cy='16' fill='green' stroke='red' stroke-dasharray='{foundCount * 100 / vulnerabilityResults.Count} {100 - (foundCount * 100 / vulnerabilityResults.Count)}' stroke-width='32'/>");
            html.AppendLine("</svg>");
            html.AppendLine("</div>");

            // -- Bar Graph Section --
            html.AppendLine("<div class='section'><div class='subheader'>Vulnerability Severity (Bar Graph)</div>");
            html.AppendLine("<svg width='550' height='300' style='display:block; margin:auto;'>");

            html.AppendLine("<rect x='50' y='50' width='40' height='200' style='fill:red;' />");    // Critical
            html.AppendLine("<text x='45' y='270' font-size='12'>SQLi</text>");

            html.AppendLine("<rect x='150' y='100' width='40' height='150' style='fill:orange;' />"); // High
            html.AppendLine("<text x='145' y='270' font-size='12'>XSS</text>");

            html.AppendLine("<rect x='250' y='150' width='40' height='100' style='fill:yellow;' />"); // Medium
            html.AppendLine("<text x='235' y='270' font-size='12'>Open Dir</text>");

            html.AppendLine("<rect x='350' y='150' width='40' height='100' style='fill:yellow;' />"); // Medium
            html.AppendLine("<text x='330' y='270' font-size='12'>Outdated</text>");

            html.AppendLine("<rect x='450' y='200' width='40' height='50' style='fill:blue;' />"); // Low
            html.AppendLine("<text x='435' y='270' font-size='12'>Headers</text>");

            html.AppendLine("</svg>");
            html.AppendLine("</div>");

            // -- "View Certificate" Link --
            html.AppendLine("<div class='section' style='text-align:center; margin-top:30px;'>");
            html.AppendLine("<a href='#certificate' style='font-size:18px; color:#3498db; text-decoration:none;'>👉 View Certificate</a>");
            html.AppendLine("</div>");

            // -- Detailed Vulnerability Table --
            html.AppendLine("<div class='section'><div class='subheader'>Detailed Vulnerability Analysis</div>");
            html.AppendLine("<table>");
            html.AppendLine("<tr><th>Vulnerability</th><th>Description</th><th>Example</th><th>Impact</th><th>Fix</th><th>CVE</th></tr>");

            html.AppendLine("<tr><td>SQL Injection</td><td>Manipulating database queries via inputs.</td><td>' OR '1'='1</td><td>Critical</td><td>Use parameterized queries.</td><td><a href='https://nvd.nist.gov/vuln/detail/CVE-2019-1234'>View CVE</a></td></tr>");
            html.AppendLine("<tr><td>XSS (Cross-Site Scripting)</td><td>Injecting malicious scripts into pages.</td><td>&lt;script&gt;alert('XSS')&lt;/script&gt;</td><td>High</td><td>Sanitize user inputs.</td><td><a href='https://nvd.nist.gov/vuln/detail/CVE-2020-5678'>View CVE</a></td></tr>");
            html.AppendLine("<tr><td>Open Directory Listing</td><td>Exposing server folders publicly.</td><td>Access /uploads/</td><td>Medium</td><td>Disable directory listing.</td><td><a href='https://nvd.nist.gov/vuln/detail/CVE-2018-4321'>View CVE</a></td></tr>");
            html.AppendLine("<tr><td>Outdated Server Version</td><td>Running outdated server software.</td><td>Apache/2.2, IIS/6.0</td><td>Medium</td><td>Update server version.</td><td><a href='https://nvd.nist.gov/vuln/detail/CVE-2015-6789'>View CVE</a></td></tr>");
            html.AppendLine("<tr><td>Server Header Information Leak</td><td>Leaking server info in HTTP headers.</td><td>Server: Apache/2.4.41</td><td>Low</td><td>Hide server headers.</td><td><a href='https://nvd.nist.gov/vuln/detail/CVE-2021-2345'>View CVE</a></td></tr>");

            html.AppendLine("</table>");
            html.AppendLine("</div>");

            // -- Certificate Section with ID for linking --
            html.AppendLine("<div id='certificate' style='page-break-before: always; margin-top:80px; text-align:center;'>");
            html.AppendLine("<h2 style='color: #2c3e50;'>Certificate of Pentest Completion</h2>");
            html.AppendLine("<p style='font-size:18px; margin-top:30px;'>This certifies that a security penetration test was conducted on</p>");
            html.AppendLine($"<p style='font-size:20px; font-weight:bold; margin-top:20px;'>{target}</p>");
            html.AppendLine("<p style='font-size:18px; margin-top:30px;'>on</p>");
            html.AppendLine($"<p style='font-size:20px; font-weight:bold; margin-top:20px;'>{DateTime.Now:MMMM dd, yyyy}</p>");
            html.AppendLine("<p style='font-size:18px; margin-top:40px;'>as part of the SecurityModule Security Testing Program.</p>");
            html.AppendLine("<div style='margin-top:60px;'>");
            html.AppendLine("<img src='wh.png' width='100' />");
            html.AppendLine("</div>");
            html.AppendLine("<p style='font-size:18px; margin-top:20px;'>Signed by: Lead Penetration Tester</p>");
            html.AppendLine("<p style='font-size:16px; color: gray;'>SecurityModule Team</p>");
            html.AppendLine("</div>");

            // -- Footer --
            html.AppendLine("<footer style='margin-top:80px; text-align:center; font-size:12px; color:gray;'>Generated by SecurityModule - Confidential Report</footer>");

            html.AppendLine("</body></html>");

            return html.ToString();
        }



        private void SendEmailWithReport(string filePath)
        {
            try
            {
                MailMessage mail = new MailMessage();
                SmtpClient smtpServer = new SmtpClient("smtp.gmail.com");

                mail.From = new MailAddress("ultronactivated@gmail.com");
                mail.To.Add("monishkanna.cs21@bitsathy.ac.in");
                mail.Subject = "Penetration Test Report";
                mail.Body = "Hi,\n\nPlease find attached the penetration test report.\n\nRegards,\nSecurityModule Scanner";

                Attachment attachment = new Attachment(filePath);
                mail.Attachments.Add(attachment);

                smtpServer.Port = 587;
                smtpServer.Credentials = new NetworkCredential("ultronactivated@gmail.com", "Dex$Ter7(/T2n2t/)");
                smtpServer.EnableSsl = true;

                smtpServer.Send(mail);

                MessageBox.Show("Report emailed successfully!", "Email Sent", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to send email: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }








        private void richTextBox1_TextChanged(object sender, EventArgs e)
        {
            richTextBox1.SelectionStart = richTextBox1.Text.Length;
            richTextBox1.ScrollToCaret();
        }

        private void checkedListBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }


        private async Task InstallNmap()
        {
            try
            {
                string nmapInstallerUrl = "https://nmap.org/dist/nmap-7.94-setup.exe";
                string installerPath = Path.Combine(Path.GetTempPath(), "nmap-setup.exe");

                using HttpClient client = new HttpClient();
                var data = await client.GetByteArrayAsync(nmapInstallerUrl);
                await File.WriteAllBytesAsync(installerPath, data);

                Process.Start(installerPath); // Launch the installer

                MessageBox.Show("Please install Nmap manually through the installer and restart the scan after installation.", "Install Nmap", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to download or start Nmap installer: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async Task RunNmapScan(string arguments)
        {
            try
            {
                string nmapPath = @"C:\Program Files (x86)\Nmap\nmap.exe";

                if (!File.Exists(nmapPath))
                {
                    MessageBox.Show("Nmap not found! Attempting to install Nmap automatically...", "Nmap Missing", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    await InstallNmap();
                    if (!File.Exists(nmapPath))
                    {
                        richTextBox1.AppendText("[!] Nmap installation failed. Skipping scan.\n\n");
                        return;
                    }
                }

                using (Process process = new Process())
                {
                    ProcessStartInfo psi = new ProcessStartInfo
                    {
                        FileName = nmapPath,
                        Arguments = arguments,
                        UseShellExecute = false,
                        RedirectStandardOutput = true,
                        RedirectStandardError = true,
                        CreateNoWindow = true
                    };

                    process.StartInfo = psi;

                    StringBuilder outputBuilder = new StringBuilder();

                    process.OutputDataReceived += (s, ev) =>
                    {
                        if (!string.IsNullOrEmpty(ev.Data))
                        {
                            this.Invoke((Action)(() =>
                            {
                                richTextBox1.AppendText(ev.Data + "\n");
                                richTextBox1.ScrollToCaret();
                            }));
                        }
                    };

                    process.Start();
                    process.BeginOutputReadLine();
                    await process.WaitForExitAsync();

                    process.CancelOutputRead();
                    process.Close();
                    process.Dispose();
                }

                richTextBox1.AppendText("\n[✔] Nmap Scan Completed.\n\n");
            }
            catch (Exception ex)
            {
                richTextBox1.AppendText($"[!] Error running Nmap scan: {ex.Message}\n\n");
            }
        }
        private async void button2_Click_1(object sender, EventArgs e)
        {
            string target = textBox1.Text.Trim(); // Get URL from input box

            if (string.IsNullOrWhiteSpace(target))
            {
                MessageBox.Show("Please enter a valid URL or IP address.", "Missing Target", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            richTextBox1.Clear(); // Clear previous output
            richTextBox1.AppendText($"[+] Starting Advanced Information Gathering for: {target}\n\n");

            try
            {
                using HttpClient client = new HttpClient();

                // WHOIS Lookup
                richTextBox1.AppendText("🔎 WHOIS Lookup:\n");
                try
                {
                    var whoisResponse = await client.GetStringAsync($"https://api.hackertarget.com/whois/?q={target}");
                    richTextBox1.AppendText(whoisResponse + "\n\n");
                }
                catch
                {
                    richTextBox1.AppendText("- Failed to fetch WHOIS data.\n\n");
                }

                await Task.Delay(500);

                // DNS Records Lookup
                richTextBox1.AppendText("🔎 DNS Records Lookup (A, MX, TXT):\n");
                try
                {
                    var dnsResponse = await client.GetStringAsync($"https://api.hackertarget.com/dnslookup/?q={target}");
                    richTextBox1.AppendText(dnsResponse + "\n\n");
                }
                catch
                {
                    richTextBox1.AppendText("- Failed to fetch DNS records.\n\n");
                }

                await Task.Delay(500);

                // Subdomain Enumeration
                richTextBox1.AppendText("🔎 Subdomain Enumeration (Basic Certificates Search):\n");
                try
                {
                    var crtshResponse = await client.GetStringAsync($"https://crt.sh/?q=%25.{target}&output=json");
                    if (!string.IsNullOrWhiteSpace(crtshResponse))
                    {
                        richTextBox1.AppendText("- Subdomains found! (Check crt.sh for full listing)\n");
                        richTextBox1.AppendText($"- Link: https://crt.sh/?q=%25.{target}\n\n");
                    }
                    else
                    {
                        richTextBox1.AppendText("- No subdomains found.\n\n");
                    }
                }
                catch
                {
                    richTextBox1.AppendText("- Failed to enumerate subdomains.\n\n");
                }

                await Task.Delay(500);

                // IP Info Lookup (IP Address, City, Country, Location, ASN)
                richTextBox1.AppendText("🔎 Server IP and GeoLocation Info:\n");
                try
                {
                    var ipInfoResponse = await client.GetStringAsync($"https://ipinfo.io/{target}/json");
                    richTextBox1.AppendText(ipInfoResponse + "\n\n");
                }
                catch
                {
                    richTextBox1.AppendText("- Failed to fetch IP information.\n\n");
                }

                await Task.Delay(500);

                // HTTP Headers Scan (Server Info, Date, etc.)
                richTextBox1.AppendText("🔎 Web Server HTTP Headers:\n");
                try
                {
                    string fullUrl = target.StartsWith("http") ? target : "https://" + target; // Force https://
                    var response = await client.GetAsync(fullUrl);
                    if (response.IsSuccessStatusCode)
                    {
                        foreach (var header in response.Headers)
                        {
                            richTextBox1.AppendText($"{header.Key}: {string.Join(", ", header.Value)}\n");
                        }
                        richTextBox1.AppendText("\n");
                    }
                    else
                    {
                        richTextBox1.AppendText("- Failed to fetch HTTP Headers.\n\n");
                    }
                }
                catch
                {
                    richTextBox1.AppendText("- HTTP Header fetch failed.\n\n");
                }

                richTextBox1.AppendText($"[✔] Information Gathering Completed at {DateTime.Now.ToString("f")}.\n");
            }
            catch (Exception ex)
            {
                richTextBox1.AppendText($"[!] Error during Information Gathering: {ex.Message}\n\n");
            }
        }




        private async void button3_Click(object sender, EventArgs e)
        {


            string target = textBox1.Text.Trim(); // Get target URL/IP

            if (string.IsNullOrWhiteSpace(target))
            {
                MessageBox.Show("Please enter a valid URL or IP address.", "Missing Target", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            richTextBox1.Clear(); // Clear previous output
            richTextBox1.AppendText($"[+] Starting Network Scan on: {target}\n\n");

            string nmapPath = @"C:\Program Files (x86)\Nmap\nmap.exe";

            if (!File.Exists(nmapPath))
            {
                MessageBox.Show("Nmap not found! Attempting to install Nmap automatically...", "Nmap Missing", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                await InstallNmap(); // Try to download and install Nmap
                if (!File.Exists(nmapPath))
                {
                    richTextBox1.AppendText("[!] Nmap installation failed. Skipping scan.\n\n");
                    return;
                }
            }

            try
            {
                string arguments = $"-O -sV -T4 -v {target}";

                ProcessStartInfo psi = new ProcessStartInfo
                {
                    FileName = nmapPath,
                    Arguments = arguments,
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    CreateNoWindow = true
                };

                using (Process process = new Process())
                {
                    process.StartInfo = psi;
                    process.OutputDataReceived += (s, ev) =>
                    {
                        if (ev.Data != null)
                        {
                            this.Invoke((Action)(() => {
                                richTextBox1.AppendText(ev.Data + "\n");
                                richTextBox1.ScrollToCaret();
                            }));
                        }
                    };
                    process.Start();
                    process.BeginOutputReadLine();
                    await process.WaitForExitAsync();
                }

                richTextBox1.AppendText("\n[✔] Network Scan Completed.\n\n");
            }
            catch (Exception ex)
            {
                richTextBox1.AppendText($"[!] Error during Network Scan: {ex.Message}\n\n");
            }
        }

        private async void button4_Click(object sender, EventArgs e)
        {
            string target = textBox1.Text.Trim();

            if (string.IsNullOrWhiteSpace(target))
            {
                MessageBox.Show("Please enter a valid URL or IP address.", "Missing Target", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            richTextBox1.Clear();
            richTextBox1.AppendText($"[+] Starting Firewall Detection Scan on: {target}\n\n");

            string nmapPath = @"C:\Program Files (x86)\Nmap\nmap.exe";

            if (!File.Exists(nmapPath))
            {
                MessageBox.Show("Nmap not found! Attempting to install Nmap automatically...", "Nmap Missing", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                await InstallNmap(); // Try install
                if (!File.Exists(nmapPath))
                {
                    richTextBox1.AppendText("[!] Nmap installation failed. Skipping scan.\n\n");
                    return;
                }
            }

            try
            {
                // Advanced stealth options for Firewall Detection
                string arguments = $"-sS -Pn -f --randomize-hosts --defeat-rst-ratelimit -v {target}";

                ProcessStartInfo psi = new ProcessStartInfo
                {
                    FileName = nmapPath,
                    Arguments = arguments,
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    CreateNoWindow = true
                };

                using (Process process = new Process())
                {
                    process.StartInfo = psi;
                    process.OutputDataReceived += (s, ev) =>
                    {
                        if (ev.Data != null)
                        {
                            this.Invoke((Action)(() => {
                                richTextBox1.AppendText(ev.Data + "\n");
                                richTextBox1.ScrollToCaret();
                            }));
                        }
                    };
                    process.Start();
                    process.BeginOutputReadLine();
                    await process.WaitForExitAsync();
                }

                richTextBox1.AppendText("\n[✔] Firewall Detection Scan Completed.\n\n");
            }
            catch (Exception ex)
            {
                richTextBox1.AppendText($"[!] Error during Firewall Scan: {ex.Message}\n\n");
            }
        }

        private async void button5_Click(object sender, EventArgs e)
        {
            string target = textBox1.Text.Trim();

            if (string.IsNullOrWhiteSpace(target))
            {
                MessageBox.Show("Please enter a valid URL or IP address.", "Missing Target", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            richTextBox1.Clear();
            richTextBox1.AppendText($"[+] Starting SSL/TLS Scan on: {target}\n\n");

            string nmapPath = @"C:\Program Files (x86)\Nmap\nmap.exe";

            if (!File.Exists(nmapPath))
            {
                MessageBox.Show("Nmap not found! Attempting to install Nmap automatically...", "Nmap Missing", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                await InstallNmap();
                if (!File.Exists(nmapPath))
                {
                    richTextBox1.AppendText("[!] Nmap installation failed. Skipping scan.\n\n");
                    return;
                }
            }

            try
            {
                string arguments = $"--script ssl-enum-ciphers -p 443 -v {target}";

                ProcessStartInfo psi = new ProcessStartInfo
                {
                    FileName = nmapPath,
                    Arguments = arguments,
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    CreateNoWindow = true
                };

                using (Process process = new Process())
                {
                    process.StartInfo = psi;
                    process.OutputDataReceived += (s, ev) =>
                    {
                        if (ev.Data != null)
                        {
                            this.Invoke((Action)(() => {
                                richTextBox1.AppendText(ev.Data + "\n");

                                // Analyze SSL/TLS version problems
                                if (ev.Data.Contains("SSLv2") || ev.Data.Contains("SSLv3") || ev.Data.Contains("TLSv1.0") || ev.Data.Contains("TLSv1.1"))
                                {
                                    richTextBox1.AppendText("\n[!] Weak SSL/TLS version detected! Possible vulnerabilities include:\n");
                                    richTextBox1.AppendText("- POODLE (SSLv3 vulnerability)\n");
                                    richTextBox1.AppendText("- BEAST attack (TLS 1.0)\n");
                                    richTextBox1.AppendText("- Heartbleed (OpenSSL TLS issues)\n");
                                    richTextBox1.AppendText("- DROWN (SSLv2 issue)\n");
                                    richTextBox1.AppendText("- Deprecated cryptographic ciphers (RC4, DES)\n\n");
                                }

                                richTextBox1.ScrollToCaret();
                            }));
                        }
                    };
                    process.Start();
                    process.BeginOutputReadLine();
                    await process.WaitForExitAsync();
                }

                richTextBox1.AppendText("\n[✔] SSL/TLS Scan Completed.\n\n");
            }
            catch (Exception ex)
            {
                richTextBox1.AppendText($"[!] Error during SSL/TLS Scan: {ex.Message}\n\n");
            }
        }

        private async void button6_Click(object sender, EventArgs e)
        {
            string target = textBox1.Text.Trim();

            if (string.IsNullOrWhiteSpace(target))
            {
                MessageBox.Show("Please enter a valid URL or IP address.", "Missing Target", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            richTextBox1.Clear();
            richTextBox1.AppendText($"[+] Starting Full Port Scan (1-65535) on: {target}\n\n");

            string nmapPath = @"C:\Program Files (x86)\Nmap\nmap.exe";

            if (!File.Exists(nmapPath))
            {
                MessageBox.Show("Nmap not found! Attempting to install Nmap automatically...", "Nmap Missing", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                await InstallNmap();
                if (!File.Exists(nmapPath))
                {
                    richTextBox1.AppendText("[!] Nmap installation failed. Skipping scan.\n\n");
                    return;
                }
            }

            try
            {
                // Full aggressive TCP scan for all ports
                string arguments = $"-p 1-65535 -sS -T4 -v {target}";

                ProcessStartInfo psi = new ProcessStartInfo
                {
                    FileName = nmapPath,
                    Arguments = arguments,
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    CreateNoWindow = true
                };

                using (Process process = new Process())
                {
                    process.StartInfo = psi;
                    process.OutputDataReceived += (s, ev) =>
                    {
                        if (ev.Data != null)
                        {
                            this.Invoke((Action)(() => {
                                richTextBox1.AppendText(ev.Data + "\n");
                                richTextBox1.ScrollToCaret();
                            }));
                        }
                    };
                    process.Start();
                    process.BeginOutputReadLine();
                    await process.WaitForExitAsync();
                }

                richTextBox1.AppendText("\n[✔] Full Port Scan Completed.\n\n");
            }
            catch (Exception ex)
            {
                richTextBox1.AppendText($"[!] Error during Full Port Scan: {ex.Message}\n\n");
            }
        }
        private async void button7_Click(object sender, EventArgs e)
        {
            string target = textBox1.Text.Trim();

            if (string.IsNullOrWhiteSpace(target))
            {
                MessageBox.Show("Please enter a valid URL or IP address.", "Missing Target", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            richTextBox1.Clear();
            richTextBox1.AppendText($"[+] Starting Cryptographic Failure Check on: {target}\n\n");

            try
            {
                string hostname = target.Replace("https://", "").Replace("http://", "").Split('/')[0];

                using (TcpClient client = new TcpClient())
                {
                    await client.ConnectAsync(hostname, 443);
                    using (SslStream sslStream = new SslStream(client.GetStream(), false, (sender2, certificate, chain, errors) => true))
                    {
                        await sslStream.AuthenticateAsClientAsync(hostname);

                        var cert = sslStream.RemoteCertificate;
                        var cert2 = new System.Security.Cryptography.X509Certificates.X509Certificate2(cert);

                        richTextBox1.AppendText($"🔐 SSL/TLS Protocol: {sslStream.SslProtocol}\n");
                        richTextBox1.AppendText($"🔐 Cipher Algorithm: {sslStream.CipherAlgorithm}\n");
                        richTextBox1.AppendText($"🔐 Cipher Strength: {sslStream.CipherStrength} bits\n");
                        richTextBox1.AppendText($"🔐 Certificate Subject: {cert2.Subject}\n");
                        richTextBox1.AppendText($"🔐 Certificate Issuer: {cert2.Issuer}\n");
                        richTextBox1.AppendText($"🔐 Certificate Valid From: {cert2.NotBefore}\n");
                        richTextBox1.AppendText($"🔐 Certificate Valid Until: {cert2.NotAfter}\n\n");

                        if (sslStream.SslProtocol == System.Security.Authentication.SslProtocols.Ssl3)
                        {
                            richTextBox1.AppendText("[!] Warning: SSL 3.0 detected (very weak, vulnerable to POODLE attack)\n");
                        }
                        if (sslStream.SslProtocol == System.Security.Authentication.SslProtocols.Tls)
                        {
                            richTextBox1.AppendText("[!] Warning: TLS 1.0 detected (weak, vulnerable to BEAST attack)\n");
                        }
                        if (sslStream.CipherStrength < 128)
                        {
                            richTextBox1.AppendText("[!] Warning: Weak cipher strength detected (<128 bits)\n");
                        }
                        else
                        {
                            richTextBox1.AppendText("[✔] Strong cryptographic standards detected.\n");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                richTextBox1.AppendText($"[!] Error during Cryptographic Check: {ex.Message}\n\n");
            }
        }
        private async void button8_Click(object sender, EventArgs e)
        {
            string targetUrl = textBox1.Text.Trim();

            if (string.IsNullOrWhiteSpace(targetUrl))
            {
                MessageBox.Show("Please enter a valid URL.", "Missing Target", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            using FolderBrowserDialog folderDialog = new FolderBrowserDialog();
            folderDialog.Description = "Select Folder to Save Website Clone";

            if (folderDialog.ShowDialog() != DialogResult.OK)
            {
                MessageBox.Show("No folder selected. Operation cancelled.", "Cancelled", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            string savePath = folderDialog.SelectedPath;

            richTextBox1.Clear();
            richTextBox1.AppendText($"[+] Starting Website Mirroring for: {targetUrl}\n\n");

            try
            {
                using HttpClient client = new HttpClient();
                HttpResponseMessage response = await client.GetAsync(targetUrl);

                if (!response.IsSuccessStatusCode)
                {
                    richTextBox1.AppendText("[!] Failed to download site content.\n");
                    return;
                }

                string htmlContent = await response.Content.ReadAsStringAsync();

                // Save the main HTML page
                string fileName = Path.Combine(savePath, "index.html");
                await File.WriteAllTextAsync(fileName, htmlContent);

                // Fake ASCII loading bar
                for (int i = 0; i <= 100; i += 10)
                {
                    string progressBar = "[" + new string('#', i / 5) + new string('-', 20 - (i / 5)) + $"] {i}%";
                    richTextBox1.AppendText(progressBar + "\n");
                    richTextBox1.ScrollToCaret();
                    await Task.Delay(300); // Slow down for cool effect
                }

                richTextBox1.AppendText("\n[✔] Website successfully mirrored to:\n" + savePath + "\n");

                MessageBox.Show("Website mirrored successfully!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                richTextBox1.AppendText($"[!] Error during website mirroring: {ex.Message}\n");
            }
        }

        private async void button9_Click(object sender, EventArgs e)
        {
            string target = textBox1.Text.Trim();

            if (string.IsNullOrWhiteSpace(target))
            {
                MessageBox.Show("Please enter a valid URL.", "Missing Target", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            richTextBox1.Clear();
            richTextBox1.AppendText($"[+] Starting Code Analysis for: {target}\n\n");

            try
            {
                using HttpClient client = new HttpClient();
                HttpResponseMessage response = await client.GetAsync(target);

                if (!response.IsSuccessStatusCode)
                {
                    richTextBox1.AppendText("[!] Failed to fetch website content.\n");
                    return;
                }

                string htmlContent = await response.Content.ReadAsStringAsync();

                // Analyze HTTP headers
                richTextBox1.AppendText("🔎 Analyzing HTTP Headers:\n");
                if (response.Headers.Server.Any())
                    richTextBox1.AppendText($"Server: {response.Headers.Server}\n");

                if (response.Headers.TryGetValues("X-Powered-By", out var poweredBy))
                {
                    foreach (var value in poweredBy)
                        richTextBox1.AppendText($"X-Powered-By: {value}\n");
                }
                else
                {
                    richTextBox1.AppendText("X-Powered-By: [Not Disclosed]\n");
                }
                richTextBox1.AppendText("\n");

                // Analyze Frontend Frameworks
                richTextBox1.AppendText("🔎 Analyzing Front-end Technologies:\n");

                if (htmlContent.Contains("wp-content") || htmlContent.Contains("wp-includes"))
                    richTextBox1.AppendText("- WordPress CMS detected\n");
                if (htmlContent.Contains("Joomla") || htmlContent.Contains("joomla.css"))
                    richTextBox1.AppendText("- Joomla CMS detected\n");
                if (htmlContent.Contains("Drupal.settings"))
                    richTextBox1.AppendText("- Drupal CMS detected\n");
                if (htmlContent.Contains("bootstrap.min.css"))
                    richTextBox1.AppendText("- Bootstrap Framework detected\n");
                if (htmlContent.Contains("jquery.js") || htmlContent.Contains("jquery.min.js"))
                    richTextBox1.AppendText("- jQuery Library detected\n");
                if (htmlContent.Contains("react") || htmlContent.Contains("react-dom"))
                    richTextBox1.AppendText("- React.js Framework detected\n");
                if (htmlContent.Contains("angular.js") || htmlContent.Contains("angular.min.js"))
                    richTextBox1.AppendText("- Angular.js Framework detected\n");
                if (htmlContent.Contains("vue.js"))
                    richTextBox1.AppendText("- Vue.js Framework detected\n");

                richTextBox1.AppendText("\n");

                // Basic Backend detection from Powered-By and Server headers
                richTextBox1.AppendText("🔎 Analyzing Backend Technologies:\n");

                if (response.Headers.TryGetValues("X-Powered-By", out var backends))
                {
                    foreach (var backend in backends)
                    {
                        if (backend.Contains("PHP"))
                            richTextBox1.AppendText("- Backend Language: PHP\n");
                        if (backend.Contains("ASP.NET"))
                            richTextBox1.AppendText("- Backend Framework: ASP.NET\n");
                        if (backend.Contains("Express") || htmlContent.Contains("express"))
                            richTextBox1.AppendText("- Backend Framework: Node.js (Express)\n");
                    }
                }

                if (response.Headers.Server.Any())
                {
                    string serverInfo = response.Headers.Server.ToString();
                    if (serverInfo.Contains("Apache"))
                        richTextBox1.AppendText("- Web Server: Apache\n");
                    if (serverInfo.Contains("nginx"))
                        richTextBox1.AppendText("- Web Server: Nginx\n");
                    if (serverInfo.Contains("IIS"))
                        richTextBox1.AppendText("- Web Server: Microsoft IIS\n");
                }

                richTextBox1.AppendText("\n[✔] Code Analysis Completed Successfully.\n\n");
            }
            catch (Exception ex)
            {
                richTextBox1.AppendText($"[!] Error during Code Analysis: {ex.Message}\n\n");
            }
        }


        private async void button10_Click(object sender, EventArgs e)
        {
            string target = textBox1.Text.Trim();

            if (string.IsNullOrWhiteSpace(target))
            {
                MessageBox.Show("Please enter a valid URL or IP address.", "Missing Target", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            // Warn the user first
            var confirm = MessageBox.Show(
                "⚠ WARNING!\n\nPing of Death involves sending large packets to the target. It is purely for educational/simulation purposes here.\n\nDo you want to proceed?",
                "Ping of Death Warning",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Warning);

            if (confirm != DialogResult.Yes)
            {
                MessageBox.Show("Operation cancelled.", "Cancelled", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            richTextBox1.Clear();
            richTextBox1.AppendText($"[+] Starting Ping of Death (simulated) on: {target}\n\n");

            try
            {
                string arguments = $"-l 65000 -n 5 {target}";

                ProcessStartInfo psi = new ProcessStartInfo
                {
                    FileName = "ping.exe",
                    Arguments = arguments,
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    CreateNoWindow = true
                };

                using (Process process = new Process())
                {
                    process.StartInfo = psi;
                    process.OutputDataReceived += (s, ev) =>
                    {
                        if (!string.IsNullOrEmpty(ev.Data))
                        {
                            this.Invoke((Action)(() => {
                                richTextBox1.AppendText(ev.Data + "\n");
                                richTextBox1.ScrollToCaret();
                            }));
                        }
                    };

                    process.Start();
                    process.BeginOutputReadLine();

                    // Fake progress bar (ASCII)
                    for (int i = 0; i <= 100; i += 20)
                    {
                        string progress = "[" + new string('#', i / 10) + new string('-', 10 - (i / 10)) + $"] {i}%";
                        this.Invoke((Action)(() => {
                            richTextBox1.AppendText(progress + "\n");
                            richTextBox1.ScrollToCaret();
                        }));
                        await Task.Delay(500);
                    }

                    await process.WaitForExitAsync();
                }

                richTextBox1.AppendText("\n[✔] Ping of Death simulation completed.\n\n");
            }
            catch (Exception ex)
            {
                richTextBox1.AppendText($"[!] Error during Ping of Death: {ex.Message}\n\n");
            }
        }


        private async void button11_Click(object sender, EventArgs e)
        {
            string target = textBox1.Text.Trim();

            if (string.IsNullOrWhiteSpace(target))
            {
                MessageBox.Show("Please enter a valid URL.", "Missing Target", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            richTextBox1.Clear();
            richTextBox1.AppendText($"[+] Starting Grab Cookies and Cache Info for: {target}\n\n");

            try
            {
                var handler = new HttpClientHandler
                {
                    AllowAutoRedirect = true,
                    UseCookies = true,
                    CookieContainer = new CookieContainer()
                };

                using var client = new HttpClient(handler);
                client.DefaultRequestHeaders.Add("User-Agent", "SecurityModuleScanner/1.0");

                HttpResponseMessage response = await client.GetAsync(target);

                if (!response.IsSuccessStatusCode)
                {
                    richTextBox1.AppendText("[!] Failed to access the website.\n");
                    return;
                }

                // Grab cookies
                Uri uri = new Uri(target);
                CookieCollection cookies = handler.CookieContainer.GetCookies(uri);

                richTextBox1.AppendText("🔎 Retrieved Cookies:\n");
                if (cookies.Count == 0)
                {
                    richTextBox1.AppendText("- No cookies set by server.\n");
                }
                else
                {
                    foreach (Cookie cookie in cookies)
                    {
                        richTextBox1.AppendText($"- {cookie.Name} = {cookie.Value}\n");
                    }
                }

                richTextBox1.AppendText("\n");

                // Grab Cache Headers
                richTextBox1.AppendText("🔎 Retrieved Web Cache Information:\n");

                if (response.Headers.TryGetValues("Cache-Control", out var cacheControl))
                {
                    foreach (var value in cacheControl)
                    {
                        richTextBox1.AppendText($"- Cache-Control: {value}\n");
                    }
                }
                else
                {
                    richTextBox1.AppendText("- No Cache-Control header found.\n");
                }

                if (response.Headers.TryGetValues("ETag", out var eTags))
                {
                    foreach (var value in eTags)
                    {
                        richTextBox1.AppendText($"- ETag: {value}\n");
                    }
                }
                else
                {
                    richTextBox1.AppendText("- No ETag found.\n");
                }

                if (response.Headers.TryGetValues("Last-Modified", out var lastModified))
                {
                    foreach (var value in lastModified)
                    {
                        richTextBox1.AppendText($"- Last-Modified: {value}\n");
                    }
                }
                else
                {
                    richTextBox1.AppendText("- No Last-Modified header found.\n");
                }

                richTextBox1.AppendText("\n[✔] Cookie and Cache Info Gathering Completed.\n");
            }
            catch (Exception ex)
            {
                richTextBox1.AppendText($"[!] Error during Cookie/Cache Gathering: {ex.Message}\n\n");
            }
        }



        private async void button12_Click(object sender, EventArgs e)
        {
            string target = textBox1.Text.Trim();

            if (string.IsNullOrWhiteSpace(target))
            {
                MessageBox.Show("Please enter a valid URL.", "Missing Target", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            richTextBox1.Clear();
            richTextBox1.AppendText($"[+] Starting Session ID Grabbing for: {target}\n\n");

            try
            {
                var handler = new HttpClientHandler
                {
                    AllowAutoRedirect = true,
                    UseCookies = true,
                    CookieContainer = new CookieContainer()
                };

                using var client = new HttpClient(handler);
                client.DefaultRequestHeaders.Add("User-Agent", "SecurityModuleScanner/1.0");

                HttpResponseMessage response = await client.GetAsync(target);

                if (!response.IsSuccessStatusCode)
                {
                    richTextBox1.AppendText("[!] Failed to access the website.\n");
                    return;
                }

                Uri uri = new Uri(target);

                // 1. Grab Session IDs from Cookies
                richTextBox1.AppendText("🔎 Checking Cookies for Session IDs:\n");
                CookieCollection cookies = handler.CookieContainer.GetCookies(uri);

                bool foundSessionCookie = false;
                foreach (Cookie cookie in cookies)
                {
                    if (cookie.Name.ToLower().Contains("session") || cookie.Name.ToLower().Contains("sid"))
                    {
                        richTextBox1.AppendText($"- Session Cookie: {cookie.Name} = {cookie.Value}\n");
                        foundSessionCookie = true;
                    }
                }
                if (!foundSessionCookie)
                {
                    richTextBox1.AppendText("- No Session IDs found in cookies.\n");
                }

                richTextBox1.AppendText("\n");

                // 2. Grab Session IDs from Hidden Fields
                richTextBox1.AppendText("🔎 Checking HTML for Hidden Session Fields:\n");
                string htmlContent = await response.Content.ReadAsStringAsync();
                bool foundHiddenSession = false;

                var matches = System.Text.RegularExpressions.Regex.Matches(htmlContent, @"<input[^>]*type=[""']hidden[""'][^>]*>", System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                foreach (System.Text.RegularExpressions.Match match in matches)
                {
                    string inputTag = match.Value;

                    if (inputTag.ToLower().Contains("session") || inputTag.ToLower().Contains("sid"))
                    {
                        richTextBox1.AppendText($"- Hidden Input Session Field: {inputTag}\n");
                        foundHiddenSession = true;
                    }
                }

                if (!foundHiddenSession)
                {
                    richTextBox1.AppendText("- No hidden session fields found.\n");
                }

                richTextBox1.AppendText("\n[✔] Session ID Grabbing Completed.\n");
            }
            catch (Exception ex)
            {
                richTextBox1.AppendText($"[!] Error during Session ID Grabbing: {ex.Message}\n\n");
            }
        }

        private void button13_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(richTextBox1.Text))
            {
                MessageBox.Show("No scan data available to save!", "No Data", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            using SaveFileDialog saveDialog = new SaveFileDialog
            {
                Title = "Save Penetration Test Report",
                Filter = "HTML Files (*.html)|*.html",
                FileName = $"PenTest_Report_{DateTime.Now:yyyyMMdd_HHmmss}.html"
            };

            if (saveDialog.ShowDialog() != DialogResult.OK)
            {
                MessageBox.Show("Report saving cancelled.", "Cancelled", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            string targetUrl = textBox1.Text.Trim();
            string rawResults = richTextBox1.Text;
            int criticalFindings = 0, highFindings = 0, mediumFindings = 0, lowFindings = 0;

            if (rawResults.Contains("SSLv3") || rawResults.Contains("SSL 3.0")) criticalFindings++;
            if (rawResults.Contains("TLSv1.0") || rawResults.Contains("TLS 1.0")) highFindings++;
            if (rawResults.Contains("Open ports") || rawResults.Contains("Directory Listing")) mediumFindings++;
            if (rawResults.Contains("Server Header Leak") || rawResults.Contains("weak cipher")) lowFindings++;

            var html = new StringBuilder();
            html.AppendLine("<html><head><title>Penetration Test Report</title><style>");
            html.AppendLine("body { font-family: Arial; margin: 40px; background: linear-gradient(#f0f4f7, #d9e2ec); }");
            html.AppendLine("h1, h2, h3 { color: #2c3e50; }");
            html.AppendLine("table { width: 100%; border-collapse: collapse; margin-top: 20px; }");
            html.AppendLine("th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }");
            html.AppendLine("th { background-color: #4CAF50; color: white; }");
            html.AppendLine(".risk-meter { display: flex; height: 30px; margin-top: 20px; }");
            html.AppendLine(".critical { width: 25%; background: red; text-align:center; color:white; }");
            html.AppendLine(".high { width: 25%; background: orange; text-align:center; color:white; }");
            html.AppendLine(".medium { width: 25%; background: yellow; color:black; text-align:center; }");
            html.AppendLine(".low { width: 25%; background: blue; text-align:center; color:white; }");
            html.AppendLine("</style></head><body>");

            html.AppendLine("<div style='text-align:center;'>");
            html.AppendLine("<img src='https://upload.wikimedia.org/wikipedia/commons/4/45/Hacker_Logo.png' width='100'><br>");
            html.AppendLine("<h1>SecurityModule Penetration Test Report</h1>");
            html.AppendLine("</div>");

            html.AppendLine($"<h3>Target: {targetUrl}</h3>");
            html.AppendLine($"<h3>Date: {DateTime.Now:dddd, dd MMMM yyyy hh:mm tt}</h3>");

            // Risk Meter
            html.AppendLine("<h2>Risk Severity Meter</h2>");
            html.AppendLine("<div class='risk-meter'>");
            html.AppendLine($"<div class='critical'>Critical ({criticalFindings})</div>");
            html.AppendLine($"<div class='high'>High ({highFindings})</div>");
            html.AppendLine($"<div class='medium'>Medium ({mediumFindings})</div>");
            html.AppendLine($"<div class='low'>Low ({lowFindings})</div>");
            html.AppendLine("</div>");
            // Findings Overview Bar Chart (CSS Div)
            html.AppendLine("<h2>Findings Overview</h2>");
            html.AppendLine("<div style='margin:20px;'>");

            html.AppendLine("<div style='background-color:#eee; width:100%; height:200px; position:relative;'>");

            int total = criticalFindings + highFindings + mediumFindings + lowFindings;
            int criticalPercent = total == 0 ? 0 : (criticalFindings * 100 / total);
            int highPercent = total == 0 ? 0 : (highFindings * 100 / total);
            int mediumPercent = total == 0 ? 0 : (mediumFindings * 100 / total);
            int lowPercent = total == 0 ? 0 : (lowFindings * 100 / total);

            html.AppendLine($"<div style='background-color:red; width:{criticalPercent}%; height:100%; float:left;' title='Critical: {criticalFindings}'></div>");
            html.AppendLine($"<div style='background-color:orange; width:{highPercent}%; height:100%; float:left;' title='High: {highFindings}'></div>");
            html.AppendLine($"<div style='background-color:yellow; width:{mediumPercent}%; height:100%; float:left;' title='Medium: {mediumFindings}'></div>");
            html.AppendLine($"<div style='background-color:blue; width:{lowPercent}%; height:100%; float:left;' title='Low: {lowFindings}'></div>");

            html.AppendLine("</div>");
            html.AppendLine("</div>");

            // Commands Used Table
            html.AppendLine("<h2>Commands Used</h2>");
            html.AppendLine("<table>");
            html.AppendLine("<tr><th>Tool</th><th>Command</th></tr>");
            html.AppendLine("<tr><td>Nmap</td><td>-O -sV -T4 -v target</td></tr>");
            html.AppendLine("<tr><td>Ping</td><td>ping -l 65000 -n 5 target</td></tr>");
            html.AppendLine("<tr><td>SSL/TLS Scan</td><td>--script ssl-enum-ciphers -p 443 -v target</td></tr>");
            html.AppendLine("<tr><td>Website Mirror</td><td>HTTP Client GET Request</td></tr>");
            html.AppendLine("</table>");

            // Detailed Findings Table
            html.AppendLine("<h2>Detailed Findings</h2>");
            html.AppendLine("<table>");
            html.AppendLine("<tr><th>Finding Type</th><th>Description</th></tr>");

            string[] findings = rawResults.Split('\n');
            foreach (var line in findings)
            {
                if (!string.IsNullOrWhiteSpace(line))
                {
                    html.AppendLine($"<tr><td>Finding</td><td>{System.Net.WebUtility.HtmlEncode(line)}</td></tr>");
                }
            }
            html.AppendLine("</table>");
            // Known CVEs Section
            html.AppendLine("<h2>Relevant CVEs & References</h2>");
            html.AppendLine("<table>");
            html.AppendLine("<tr><th>CVE ID</th><th>Description</th><th>Reference</th></tr>");

            html.AppendLine("<tr><td>CVE-2014-3566</td><td>POODLE Attack (SSL 3.0 vulnerability)</td><td><a href='https://nvd.nist.gov/vuln/detail/CVE-2014-3566' target='_blank'>View</a></td></tr>");
            html.AppendLine("<tr><td>CVE-2015-0204</td><td>FREAK Attack (weak export ciphers)</td><td><a href='https://nvd.nist.gov/vuln/detail/CVE-2015-0204' target='_blank'>View</a></td></tr>");
            html.AppendLine("<tr><td>CVE-2016-2107</td><td>Padding Oracle in OpenSSL (decryption flaw)</td><td><a href='https://nvd.nist.gov/vuln/detail/CVE-2016-2107' target='_blank'>View</a></td></tr>");
            html.AppendLine("<tr><td>CVE-2017-0144</td><td>EternalBlue Exploit (Windows SMB vulnerability)</td><td><a href='https://nvd.nist.gov/vuln/detail/CVE-2017-0144' target='_blank'>View</a></td></tr>");
            html.AppendLine("<tr><td>CVE-2018-11776</td><td>Apache Struts Remote Code Execution</td><td><a href='https://nvd.nist.gov/vuln/detail/CVE-2018-11776' target='_blank'>View</a></td></tr>");
            html.AppendLine("<tr><td>CVE-2019-0708</td><td>BlueKeep (Windows RDP vulnerability)</td><td><a href='https://nvd.nist.gov/vuln/detail/CVE-2019-0708' target='_blank'>View</a></td></tr>");
            html.AppendLine("<tr><td>CVE-2020-0601</td><td>CurveBall (Windows CryptoAPI Spoofing)</td><td><a href='https://nvd.nist.gov/vuln/detail/CVE-2020-0601' target='_blank'>View</a></td></tr>");

            html.AppendLine("</table>");

            // Certificate of Completion
            html.AppendLine("<h2>Certificate of Completion</h2>");
            html.AppendLine("<div style='text-align:center; margin-top:30px;'>");
            html.AppendLine("<p>This certifies that a Penetration Test was conducted against:</p>");
            html.AppendLine($"<p><b>{targetUrl}</b></p>");
            html.AppendLine($"<p>on {DateTime.Now:MMMM dd, yyyy}</p>");
            html.AppendLine("<img src='https://upload.wikimedia.org/wikipedia/commons/thumb/4/4f/Iconic-image-check-mark-green.svg/1200px-Iconic-image-check-mark-green.svg.png' width='80'><br>");
            html.AppendLine("<p>Signed by: Lead Penetration Tester<br><b>SecurityModule Team</b></p>");
            html.AppendLine("</div>");

            // Footer
            html.AppendLine("<footer style='margin-top:50px; text-align:center; font-size:12px; color:gray;'>");
            html.AppendLine("Generated by SecurityModule | Confidential Report | © 2025");
            html.AppendLine("</footer>");

            html.AppendLine("</body></html>");

            // Finally write file
            File.WriteAllText(saveDialog.FileName, html.ToString());
            Process.Start(new ProcessStartInfo(saveDialog.FileName) { UseShellExecute = true });
        }


    }

}
    
